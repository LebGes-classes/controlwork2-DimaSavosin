Вариант 2
1)Наследование - это принцип ООП, который позволяет не копировать методы и поля другого класса.Каждый дочерний класс наследует методы и атрибуты, прописанные в родительском. Он может использовать нужные ему методы или добавить новые. При этом заново прописывать эти атрибуты и методы не нужно. Например, У класса «Карточка товара» есть атрибуты тип товара, название, цена, производитель, а также методы «Вывести карточку» и «Обновить цену».
Подкласс «Айфон» берёт все атрибуты и методы, записывает в атрибут «тип товара» слово «смартфон плюс добавляет свои атрибуты — «Количество сим-карт» и «Ёмкость аккумулятора».
Объект «Айфон 15» заполняет все атрибуты своими значениями и может использовать методы класса «Карточка товара».

2)Преимущества:
Удобство расширяемости: Позволяет классу реализовывать методы нескольких интерфейсов, что обеспечивает возможность использования различных функциональностей.

Разделение кода: Интерфейсы позволяют разделить код на более мелкие, управляемые компоненты.

Недостатки:
Алгоритмическая сложность: Множественное наследование через интерфейсы может привести к сложности, особенно когда различные интерфейсы имеют методы с одинаковыми именами. В этом случае требуется явное определение, какой метод использовать.

Возможные конфликты имен методов: Если два или более интерфейса имеют методы с одинаковыми именами, но разной реализацией, возникает конфликт, который нужно разрешить в классе, реализующем эти интерфейсы.

Сложность понимания: Использование множественного наследования через интерфейсы может сделать код сложнее для понимания, особенно если класс реализует множество интерфейсов с различными методами.

3)  Полиморфизм - это возможность объектов вести себя по-разному в зависимости от их типа, но использовать для этого одинаковые имена методов.Например,у разных животных был одинаковый способ издавать звуки, но каждое животное делает свой собственный звук. Например, у собаки это лай, у кошки - мурлыканье. Таким образом, хотя у них разные звуки, они все умеют издавать звук. Это и есть пример полиморфизма: использование одной и той же операции (издание звука) у разных объектов (собака, кошка) с разной реализацией (лай, мурлыканье), но через общий интерфейс (издание звука).

4)Полиморфизм с методами реализуется через возможность переопределения методов в подклассах.Eсть классы: один основной класс и его подклассы. Если у подкласса есть метод с тем же именем и параметрами, что и у родительского класса, это называется переопределением метода.Например, если у нас есть класс "Животное" с методом "сделать звук", и у наследников этого класса, таких как "Собака" и "Кошка", есть свои версии метода "сделать звук", то при вызове метода "сделать звук" у объекта класса "Животное" Java автоматически определит, какой метод использовать в зависимости от типа объекта.

5) Полиморфизм в Java имеет два типа: статическое связывание и динамическое связывание. Перегрузка метода является примером статического полиморфизма, а переопределение метода – примером динамического полиморфизма.
Пример перегрузки метода:
public int add(int a, int b) {
        return a + b;
    }

    // Тот же метод add, но принимает теперь два числа типа double и возвращает их сумму
    public double add(double a, double b) {
        return a + b;
    }

    // Метод принимает три целых числа и возвращает их сумму
    public int add(int a, int b, int c) {
        return a + b + c;
    }
Пример переопределения метода:
public class Dog extends Pet {
@Override
    void sound() {
        System.out.println("Гав");
    }
class Cat extends Pet {
@Override
    void sound() {
        System.out.println("Мяу");
    }
оба наследуются от Pet, но в зависимости от животного будет вызываться нужный метод